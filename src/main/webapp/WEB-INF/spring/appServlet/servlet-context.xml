<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<context:component-scan base-package="com.gail" />
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven content-negotiation-manager="contentNegotiationManager"/>

	<default-servlet-handler />
	
	<beans:bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
       <beans:property name="defaultContentType" value="application/json" />
    </beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/js/**" location="/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .html resources in the /WEB-INF/templates/email/ directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/templates/email/" />
		<beans:property name="suffix" value=".html" />
	</beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<beans:property name="maxUploadSize" value="10000000"/>
	</beans:bean>
	
	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>	
	
	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean>

	<beans:bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="packagesToScan" value="com.gail.model"/>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
                <beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
                <beans:prop key="hibernate.connection.CharSet">utf8</beans:prop>
                <beans:prop key="hibernate.connection.characterEncoding">utf8</beans:prop>
                <beans:prop key="hibernate.connection.useUnicode">true</beans:prop>
                <beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
                <beans:prop key="hibernate.dynamic_update">${hibernate.dynamic_update}</beans:prop>
                <beans:prop key="hibernate.format_sql">${hibernate.format_sql}</beans:prop>
            </beans:props>
        </beans:property>
	</beans:bean>
	
	<task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>
	<task:executor id="myExecutor" pool-size="5" queue-capacity="100" />
	<task:scheduler id="myScheduler" pool-size="10" />
	
<!-- 	<beans:bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<beans:property name="corePoolSize" value="5" />
		<beans:property name="maxPoolSize" value="10" />
		<beans:property name="WaitForTasksToCompleteOnShutdown" value="true" />
	</beans:bean> -->
	
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="${mail.host}" />
		<beans:property name="port" value="${mail.port}" />
		<beans:property name="username" value="${mail.username}" />
		<beans:property name="password" value="${mail.password}" />
 
		<!-- The name of the property, following JavaBean naming conventions -->
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">${mail.transport.protocol}</beans:prop>
				<beans:prop key="mail.smtp.auth">${mail.smtp.auth}</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</beans:prop>
				<beans:prop key="mail.debug">${mail.debug}</beans:prop>
				<beans:prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</beans:prop>
				<beans:prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- Configure SessionFactory -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName" value="${mysqlDriver}" />
		<beans:property name="url" value="${mysql.url}" />
		<beans:property name="username" value="${mysql.username}" />
		<beans:property name="password" value="${mysql.password}" />
	</beans:bean>

	<!-- END HIBERNATE CONFIG -->
	
	<!-- Property configurer -->
	<beans:bean class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location" value="classpath:config.properties" />
	</beans:bean>
	
</beans:beans>
